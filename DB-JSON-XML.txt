//regex
[RegularExpression(@"^(The\s)([A-Z][a-z]*)$")]  
[RegularExpression(@"^([A-Za-z0-9\\s]+?)(\\sstr\\.)$")]
//large range
[Range(typeof(decimal), "0", "79228162514264337593543950335")]


//string to enum parse

 object weapon;
                bool isValidWeapon = Enum.TryParse(typeof(WeaponEnum), oDTO.Weapon, true, out weapon);

                if (!isValidWeapon)
                {
                    sb.AppendLine(ErrorMessage);
                    continue;
                }

                Officer officer = new Officer()
                {
                    FullName = oDTO.Name,
                    Salary = oDTO.Money,
                    Position = (PositionEnum)position,
                    Weapon = (WeaponEnum)weapon,
                    DepartmentId = oDTO.DepartmentId
                };

//string to date parse

  DateTime currIncarceration;
                bool isCurrIncarceration = 
                    DateTime.TryParseExact(pDTO.IncarcerationDate, 
                    "dd/MM/yyyy", 
                    CultureInfo.InvariantCulture, 
                    DateTimeStyles.None, 
                    out currIncarceration);
                if (isCurrIncarceration == false)
                {
                    sb.AppendLine("Invalid Data");
                    continue;
                }
                DateTime? currRelease = null;
                if (!String.IsNullOrEmpty(pDTO.ReleaseDate))
                {
                    bool isCurrRelease =
                   DateTime.TryParseExact(pDTO.ReleaseDate,
                   "dd/MM/yyyy",
                   CultureInfo.InvariantCulture,
                   DateTimeStyles.None,
                   out DateTime currReleaseValue);

                    if (isCurrRelease == false)
                    {
                        sb.AppendLine("Invalid Data");
                        continue;
                    }
                    currRelease = currReleaseValue;
                }

//xml deserialize

  StringBuilder sb = new StringBuilder();
            XmlRootAttribute xmlRoot = new XmlRootAttribute("Officers");
            XmlSerializer xmlSerializer = new XmlSerializer(typeof(OfficerDTO[]), xmlRoot);

            using StringReader stringReader = new StringReader(xmlString);
            OfficerDTO[] officerDTOs = (OfficerDTO[])xmlSerializer.Deserialize(stringReader);


//json deserialize

 ImportPrisonersAndMailsDTO[] prisonersAndMails = 
                JsonConvert.DeserializeObject<ImportPrisonersAndMailsDTO[]>(jsonString);

            ICollection<Prisoner>prisoners = new List<Prisoner>();
            StringBuilder sb = new StringBuilder();

//json serialize

string json = JsonConvert.SerializeObject(prisoners, Formatting.Indented);
            return json;

//xml serializer with dates

 StringBuilder sb = new StringBuilder();

            XmlSerializer xmlSerializer = new XmlSerializer(typeof(ExportPrisonerDto[]), new XmlRootAttribute("Prisoners"));
            XmlSerializerNamespaces namespaces = new XmlSerializerNamespaces();
            namespaces.Add(string.Empty, string.Empty);

            string[] prisonerNamesArr = prisonersNames
                .Split(",")
                .ToArray();

            ExportPrisonerDto[] prisoners = context
                .Prisoners
                .ToArray()
                .Where(p => prisonerNamesArr.Contains(p.FullName))
                .Select(p => new ExportPrisonerDto()
                {
                    Id = p.Id,
                    FullName = p.FullName,
                    IncarcerationDate = p.IncarcerationDate.ToString("yyyy-MM-dd", CultureInfo.CurrentCulture),
                    Mails = p.Mails
                        .Select(m => new ExportPrisonerMailDto()
                        {
                            ReversedDescription = String.Join("", m.Description.Reverse())
                        })
                        .ToArray()
                })
                .OrderBy(p => p.FullName)
                .ThenBy(p => p.Id)
                .ToArray();

            using (StringWriter stringWriter = new StringWriter(sb))
            {
                xmlSerializer.Serialize(stringWriter, prisoners, namespaces);
            }

            return sb.ToString().TrimEnd();

//Add to a composite key table

 Officer officer = new Officer()
                {
                    FullName = oDTO.Name,
                    Salary = oDTO.Money,
                    Position = (PositionEnum)position,
                    Weapon = (WeaponEnum)weapon,
                    DepartmentId = oDTO.DepartmentId
                };

                foreach (var prisoner in oDTO.Prisoners)
                {
                    officer.OfficerPrisoners.Add(new OfficerPrisoner 
                    { 
                        Officer = officer, 
                        PrisonerId = prisoner.Id 
                    });
                }

                officerList.Add(officer);

// composite key on modle creating - don't forget to add DbContext properties!!!

base.OnModelCreating(builder);
			builder.Entity<OfficerPrisoner>(op =>
			{
				op.HasKey(k => new { k.OfficerId, k.PrisonerId });

			});

